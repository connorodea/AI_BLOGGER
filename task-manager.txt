from typing import Dict, List, Optional, Any
import asyncio
from datetime import datetime
import logging
from dataclasses import dataclass
import json
import uuid
from enum import Enum

logger = logging.getLogger(__name__)

class TaskStatus(Enum):
    PENDING = "pending"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"

@dataclass
class TaskInfo:
    task_id: str
    status: TaskStatus
    created_at: datetime
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    error: Optional[str] = None
    progress: float = 0.0
    result: Optional[Dict] = None
    metadata: Dict = None

class TaskManager:
    """Manages concurrent task execution"""
    
    def __init__(self, max_concurrent: int = 5, max_retries: int = 3):
        self.max_concurrent = max_concurrent
        self.max_retries = max_retries
        self.tasks: Dict[str, TaskInfo] = {}
        self.semaphore = asyncio.Semaphore(max_concurrent)
        self._cleanup_task = None
    
    async def start(self):
        """Start task manager"""
        self._cleanup_task = asyncio.create_task(self._cleanup_completed_tasks())
    
    async def stop(self):
        """Stop task manager"""
        if self._cleanup_task:
            self._cleanup_task.cancel()
            try:
                await self._cleanup_task
            except asyncio.CancelledError:
                pass
    
    async def submit_task(
        self,
        coroutine: Any,
        task_id: Optional[str] = None,
        metadata: Optional[Dict] = None
    ) -> str:
        """Submit a task for execution"""
        task_id = task_id or str(uuid.uuid4())
        
        if task_id in self.tasks:
            raise ValueError(f"Task with id {task_id} already exists")
        
        self.tasks[task_id] = TaskInfo(
            task_id=task_id,
            status=TaskStatus.PENDING,
            created_at=datetime.now(),
            metadata=metadata or {}
        )
        
        # Start task execution
        asyncio.create_task(self._execute_task(task_id, coroutine))
        
        return task_id
    
    async def _execute_task(self, task_id: str, coroutine: Any):
        """Execute a task with retries and error handling"""
        task_info = self.tasks[task_id]
        retries = 0
        
        while retries <= self.max_retries:
            try:
                async with self.semaphore:
                    # Update task status
                    task_info.status = TaskStatus.RUNNING
                    task_info.started_at = datetime.now()
                    
                    # Execute task
                    result = await coroutine
                    
                    # Update task info
                    task_info.status = TaskStatus.COMPLETED
                    task_info.completed_at = datetime.now()
                    task_info.result = result
                    task_info.progress = 1.0
                    return
                    
            except Exception as e:
                logger.error(f"Task {task_id} failed: {e}")
                retries += 1
                
                if retries <= self.max_retries:
                    # Wait before retry
                    await asyncio.sleep(2 ** retries)
                else:
                    # Mark task as failed
                    task_info.status = TaskStatus.FAILED
                    task_info.error = str(e)
                    task_info.completed_at = datetime.now()
    
    async def get_task_status(self, task_id: str) -> Optional[TaskInfo]:
        """Get status of a specific task"""
        return self.tasks.get(task_id)
    
    async def cancel_task(self, task_id: str) -> bool:
        """Cancel a task"""
        task_info = self.tasks.get(task_id)
        if not task_info:
            return False
        
        if task_info.status == TaskStatus.RUNNING:
            task_info.status = TaskStatus.CANCELLED
            task_info.completed_at = datetime.now()
            return True
            
        return False
    
    async def get_active_tasks(self) -> List[TaskInfo]:
        """Get all active tasks"""
        return [
            task for task in self.tasks.values()
            if task.status in (TaskStatus.PENDING, TaskStatus.RUNNING)
        ]
    
    async def get_completed_tasks(self) -> List[TaskInfo]:
        """Get all completed tasks"""
        return [
            task for task in self.tasks.values()
            if task.status == TaskStatus.COMPLETED
        ]
    
    async def get_failed_tasks(self) -> List[TaskInfo]:
        """Get all failed tasks"""
        return [
            task for task in self.tasks.values()
            if task.status == TaskStatus.FAILED
        ]
    
    async def update_progress(self, task_id: str, progress: float):
        """Update task progress"""
        if task_id in self.tasks:
            self.tasks[task_id].progress = progress
    
    async def _cleanup_completed_tasks(self):
        """Periodically cleanup old completed tasks"""
        while True:
            try:
                current_time = datetime.now()
                # Keep tasks for 24 hours
                cutoff = current_time.timestamp() - (24 * 3600)
                
                to_remove = [
                    task_id for task_id, task in self.tasks.items()
                    if (task.status in (TaskStatus.COMPLETED, TaskStatus.FAILED) and
                        task.completed_at and
                        task.completed_at.timestamp() < cutoff)
                ]
                
                for task_id in to_remove:
                    del self.tasks[task_id]
                
                await asyncio.sleep(3600)  # Cleanup every hour
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"Task cleanup error: {e}")
                await asyncio.sleep(60)  # Wait before retry