#!/bin/bash

# Exit on any error
set -e

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Helper functions
log_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

check_dependencies() {
    log_info "Checking dependencies..."
    local deps=("docker" "docker-compose" "python3" "pip" "gcloud" "openssl")
    
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            log_error "$dep is required but not installed."
            exit 1
        fi
    done
}

check_config() {
    log_info "Checking configuration..."
    
    # Check if config files exist
    if [ ! -f "config.yaml" ]; then
        log_error "config.yaml not found"
        exit 1
    fi
    
    if [ ! -f ".env" ]; then
        log_error ".env file not found"
        exit 1
    fi
    
    # Validate config.yaml
    python3 -c 'import yaml; yaml.safe_load(open("config.yaml"))' || {
        log_error "Invalid config.yaml"
        exit 1
    }
}

setup_credentials() {
    log_info "Setting up credentials..."
    
    # Create credentials directory
    mkdir -p credentials
    
    # Generate SSL certificates if needed
    if [ ! -f "credentials/cert.pem" ]; then
        log_info "Generating SSL certificates..."
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
            -keyout credentials/privkey.pem \
            -out credentials/cert.pem \
            -subj "/C=US/ST=State/L=City/O=Organization/CN=localhost"
    fi
    
    # Set up Google Cloud credentials if needed
    if [ -z "$GOOGLE_APPLICATION_CREDENTIALS" ]; then
        log_warn "GOOGLE_APPLICATION_CREDENTIALS not set"
        log_warn "You may need to run: gcloud auth application-default login"
    fi
}

setup_directories() {
    log_info "Setting up directory structure..."
    
    # Create necessary directories
    mkdir -p config logs data/backups data/metrics
    
    # Set permissions
    chmod 755 config logs data
    chmod 700 credentials
}

build_containers() {
    log_info "Building containers..."
    
    # Build with cache from production
    if [ "$ENV" = "production" ]; then
        docker-compose build --pull
    else
        docker-compose build
    fi
}

run_tests() {
    log_info "Running tests..."
    
    # Run pytest
    python3 -m pytest tests/ || {
        log_error "Tests failed"
        exit 1
    }
}

deploy_services() {
    log_info "Deploying services..."
    
    # Stop existing services
    docker-compose down || true
    
    # Start new services
    docker-compose up -d
    
    # Wait for services to be healthy
    log_info "Waiting for services to be healthy..."
    for i in {1..30}; do
        if curl -sSf http://localhost:8000/health >/dev/null 2>&1; then
            log_info "Services are healthy"
            break
        fi
        if