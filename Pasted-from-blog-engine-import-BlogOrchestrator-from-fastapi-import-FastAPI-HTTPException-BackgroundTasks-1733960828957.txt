from blog_engine import BlogOrchestrator
from fastapi import FastAPI, HTTPException, BackgroundTasks, Depends
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import JSONResponse
import uvicorn
import os
import yaml
import logging
from typing import List, Optional
import asyncio
from datetime import datetime

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = FastAPI(title="AI Blog Engine API")

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Adjust in production
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Load configuration
def load_config():
    try:
        if os.path.exists('config.yaml'):
            with open('config.yaml') as f:
                return yaml.safe_load(f)
        else:
            # Default config for Replit
            return {
                'services': {
                    'openai': {
                        'enabled': True,
                        'api_key': os.environ.get('OPENAI_API_KEY'),
                        'model': 'gpt-4'
                    },
                    'storage': {
                        'type': 'local',
                        'output_dir': 'blog_posts'
                    }
                },
                'max_concurrent_tasks': 3
            }
    except Exception as e:
        logger.error(f"Failed to load config: {e}")
        raise

# Initialize engine
config = load_config()
engine = BlogOrchestrator(config)

@app.on_event("startup")
async def startup_event():
    """Initialize the blog engine on startup"""
    try:
        await engine.initialize()
        logger.info("Blog engine initialized successfully")
    except Exception as e:
        logger.error(f"Failed to initialize blog engine: {e}")
        raise

@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

@app.post("/content/generate")
async def generate_content(
    topic: str,
    keywords: List[str],
    background_tasks: BackgroundTasks
):
    """Generate blog content"""
    try:
        task_id = await engine.generate_content(
            topic=topic,
            keywords=keywords
        )
        
        return {
            "task_id": task_id,
            "status": "processing",
            "message": "Content generation started"
        }
    except Exception as e:
        logger.error(f"Content generation failed: {e}")
        raise HTTPException(
            status_code=500,
            detail=str(e)
        )

@app.get("/content/status/{task_id}")
async def get_content_status(task_id: str):
    """Get content generation status"""
    try:
        status = await engine.get_task_status(task_id)
        return status
    except Exception as e:
        logger.error(f"Failed to get status for task {task_id}: {e}")
        raise HTTPException(
            status_code=500,
            detail=str(e)
        )

@app.get("/content/{content_id}")
async def get_content(content_id: str):
    """Get generated content"""
    try:
        content = await engine.storage.get_post(content_id)
        if not content:
            raise HTTPException(
                status_code=404,
                detail="Content not found"
            )
        return content
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Failed to get content {content_id}: {e}")
        raise HTTPException(
            status_code=500,
            detail=str(e)
        )

@app.get("/metrics")
async def get_metrics():
    """Get system metrics"""
    try:
        return await engine.get_system_status()
    except Exception as e:
        logger.error(f"Failed to get metrics: {e}")
        raise HTTPException(
            status_code=500,
            detail=str(e)
        )

# Replit healthcheck endpoint
@app.get("/-/health")
async def replit_health():
    """Replit-specific health check endpoint"""
    return {"status": "ok"}

if __name__ == "__main__":
    # Get port from Replit environment or use default
    port = int(os.environ.get("PORT", 8080))
    
    # Run with uvicorn
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=port,
        reload=True if os.environ.get("REPL_OWNER") else False
    )