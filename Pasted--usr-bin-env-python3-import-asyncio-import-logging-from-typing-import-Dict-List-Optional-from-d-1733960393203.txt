#!/usr/bin/env python3

import asyncio
import logging
from typing import Dict, List, Optional
from datetime import datetime, timedelta
import yaml

from .planner import ContentPlanner
from .optimizer import SEOOptimizer
from .storage import StorageManager
from .monitoring import MonitoringSystem
from .task_manager import TaskManager

logger = logging.getLogger(__name__)

class BlogEngine:
    """Main blog engine orchestrator"""
    
    def __init__(self, config_path: str):
        self.config = self._load_config(config_path)
        self.planner = ContentPlanner(self.config)
        self.optimizer = SEOOptimizer(self.config)
        self.storage = StorageManager(self.config)
        self.monitoring = MonitoringSystem(self.config)
        self.task_manager = TaskManager(
            max_concurrent=self.config.get('max_concurrent_tasks', 5)
        )
    
    @staticmethod
    def _load_config(config_path: str) -> Dict:
        """Load and validate configuration"""
        with open(config_path) as f:
            return yaml.safe_load(f)
    
    async def initialize(self):
        """Initialize all components"""
        await asyncio.gather(
            self.storage.initialize(),
            self.monitoring.start_monitoring(),
            self.task_manager.start()
        )
    
    async def shutdown(self):
        """Shutdown all components"""
        await asyncio.gather(
            self.monitoring.stop_monitoring(),
            self.task_manager.stop()
        )
    
    async def plan_content(
        self,
        niche: str,
        duration_weeks: int = 4,
        posts_per_week: int = 2
    ) -> str:
        """Plan content calendar"""
        async def _plan():
            start_date = datetime.now()
            end_date = start_date + timedelta(weeks=duration_weeks)
            
            return await self.planner.create_content_calendar(
                niche=niche,
                start_date=start_date,
                end_date=end_date,
                posts_per_week=posts_per_week
            )
        
        # Submit planning task
        task_id = await self.task_manager.submit_task(
            _plan(),
            metadata={'type': 'content_planning', 'niche': niche}
        )
        
        return task_id
    
    async def generate_content(
        self,
        topic: str,
        keywords: List[str],
        optimize: bool = True
    ) -> str:
        """Generate and optimize content"""
        async def _generate():
            # Get content plan
            plan = await self.planner._generate_content_brief(
                topic=topic,
                keywords=keywords,
                audience=['general']  # TODO: Add audience targeting
            )
            
            # Generate base content
            content = await self._generate_base_content(plan)
            
            # Optimize if requested
            if optimize:
                content = await self.optimizer.optimize_content(
                    content=content,
                    keywords=keywords
                )
            
            # Save content
            return await self.storage.save_post(content)
        
        # Submit generation task
        task_id = await self.task_manager.submit_task(
            _generate(),
            metadata={
                'type': 'content_generation',
                'topic': topic,
                'keywords': keywords
            }
        )
        
        return task_id
    
    async def get_task_status(self, task_id: str) -> Dict:
        """Get status of a task"""
        return await self.task_manager.get_task_status(task_id)
    
    async def get_content_analytics(self, content_id: str) -> Dict:
        """Get analytics for specific content"""
        if self.monitoring:
            return await self.monitoring.get_content_analytics(content_id)
        return {}
    
    async def get_system_status(self) -> Dict:
        """Get overall system status"""
        active_tasks = await self.task_manager.get_active_tasks()
        monitoring_status = (
            await self.monitoring.get_system_status() 
            if self.monitoring else {}
        )
        
        return {
            'active_tasks': len(active_tasks),
            'monitoring': monitoring_status,
            'storage': await self.storage.get_status()
        }

def main():
    """CLI entry point"""
    import argparse
    
    parser = argparse.ArgumentParser(description='AI Blog Engine')
    parser.add_argument('--config', default='config.yaml', help='Config file path')
    parser.add_argument('--command', required=True, choices=['plan', 'generate', 'status'])
    parser.add_argument('--topic', help='Content topic')
    parser.add_argument('--keywords', help='Comma-separated keywords')
    parser.add_argument('--niche', help='Content niche')
    parser.add_argument('--task-id', help='Task ID')
    
    args = parser.parse_args()
    
    async def run():
        engine = BlogEngine(args.config)
        await engine.initialize()
        
        try:
            if args.command == 'plan':
                if not args.niche:
                    raise ValueError("Niche required for planning")
                task_id = await engine.plan_content(args.niche)
                print(f"Planning started. Task ID: {task_id}")
                
            elif args.command == 'generate':
                if not args.topic or not args.keywords:
                    raise ValueError("Topic and keywords required for generation")
                task_id = await engine.generate_content(
                    args.topic,
                    args.keywords.split(',')
                )
                print(f"Generation started. Task ID: {task_id}")
                
            elif args.command == 'status':
                if args.task_id:
                    status = await engine.get_task_status(args.task_id)
                    print(f"Task status: {status}")
                else:
                    status = await engine.get_system_status()
                    print(f"System status: {status}")
        
        finally:
            await engine.shutdown()
    
    asyncio.run(run())

if __name__ == "__main__":
    main()