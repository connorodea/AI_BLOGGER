// src/server.ts

import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import rateLimit from 'express-rate-limit';
import { z } from 'zod';
import { loadConfig } from './config';
import { ContentGenerator } from './services/content/generator';
import { ContentOptimizer } from './services/content/optimizer';
import { TaskQueue } from './services/queue/taskQueue';
import logger from './utils/logger';
import { GenerationTask } from './types';

// Load configuration
const config = loadConfig();

// Initialize services
const contentGenerator = new ContentGenerator(config);
const contentOptimizer = new ContentOptimizer(config);

// Initialize task queue
const taskQueue = new TaskQueue(config, async (task: GenerationTask) => {
  try {
    // Generate content
    const post = await contentGenerator.generateContent(task.topic, task.keywords);
    
    // Optimize if enabled
    if (config.content.optimization.enabled) {
      await contentOptimizer.optimizeContent(post);
    }
    
    task.result = post;
    
  } catch (error) {
    logger.error(`Task processing failed: ${error}`);
    throw error;
  }
});

// Start task queue
taskQueue.start();

// Create Express app
const app = express();

// Middleware
app.use(helmet());
app.use(cors());
app.use(express.json());
app.use(morgan('combined'));

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100 // limit each IP to 100 requests per windowMs
});
app.use(limiter);

// Request validation schemas
const generateContentSchema = z.object({
  topic: z.string().min(1),
  keywords: z.array(z.string()).min(1),
  priority: z.enum(['low', 'medium', 'high']).default('medium'),
});

// Routes
app.post('/api/content/generate', async (req, res) => {
  try {
    const { topic, keywords, priority } = generateContentSchema.parse(req.body);
    
    const taskId = await taskQueue.addTask({
      topic,
      keywords,
      priority,
    });
    
    res.json({
      taskId,
      message: 'Content generation started',
      status: 'pending',
    });
    
  } catch (error) {
    logger.error('Content generation request failed:', error);
    res.status(400).json({
      error: error instanceof Error ? error.message : 'Invalid request',
    });
  }
});

app.get('/api/content/status/:taskId', async (req, res) => {
  try {
    const { taskId } = req.params;
    const task = await taskQueue.getTask(taskId);
    
    if (!task) {
      return res.status(404).json({ error: 'Task not found' });
    }
    
    res.json({
      taskId: task.id,
      status: task.status,
      result: task.result,
      error: task.error,
      createdAt: task.createdAt,
      startedAt: task.startedAt,
      completedAt: task.completedAt,
    });
    
  } catch (error) {
    logger.error('Status check failed:', error);
    res.status(500).json({
      error: 'Failed to get task status',
    });
  }
});

app.get('/api/queue/stats', (req, res) => {
  try {
    const stats = taskQueue.getStats();
    res.json(stats);
  } catch (error) {
    logger.error('Stats request failed:', error);
    res.status(500).json({
      error: 'Failed to get queue stats',
    });
  }
});

// Health check endpoint
app.get('/health', (req, res) => {
  res.json({
    status: 'healthy',
    timestamp: new Date().toISOString(),
    queue: taskQueue.getStats(),
  });
});

// Start server
const port = process.env.PORT || 3000;
app.listen(port, () => {
  logger.info(`Server running on port ${port}`);
});

// Handle shutdown
process.on('SIGTERM', async () => {
  logger.info('Received SIGTERM signal. Shutting down gracefully...');
  await taskQueue.stop();
  process.exit(0);
});