# AI Blog Engine Production Configuration

## Base Configuration (config.yaml)
```yaml
# API Configuration
api:
  enabled: true
  host: "0.0.0.0"
  port: 8000
  cors_origins: ["*"]
  rate_limit: 100  # requests per minute

# OpenAI Configuration
services:
  openai:
    enabled: true
    api_key: "${OPENAI_API_KEY}"
    default_model: "gpt-4"
    fallback_model: "gpt-3.5-turbo"
    temperature: 0.7
    max_retries: 3
    timeout: 30

# Storage Configuration
storage:
  type: "gcloud"  # or "local" for development
  bucket_name: "${STORAGE_BUCKET}"
  project_id: "${GCP_PROJECT_ID}"
  credentials_path: "/path/to/credentials.json"

# Queue Configuration
queue:
  max_concurrent: 5
  max_queue_size: 100
  default_priority: "medium"
  retry_policy:
    max_attempts: 3
    initial_delay: 1
    max_delay: 30
    exponential_base: 2

# Performance Configuration
performance:
  window_size: 100
  thresholds:
    content_generation: 60  # seconds
    optimization: 30  # seconds
    storage_operation: 5  # seconds
    cpu_percent: 80
    memory_percent: 85
  monitoring:
    enabled: true
    prometheus_port: 9090
    alert_thresholds:
      error_rate: 0.01
      latency_p95: 30

# Content Generation Settings
content:
  min_words: 800
  max_words: 3000
  default_tone: "professional"
  optimization:
    enabled: true
    min_seo_score: 0.8
    min_readability_score: 0.7
    keyword_density: 
      min: 0.5
      max: 3.0

# Security Settings
security:
  api_key_required: true
  allowed_ips: []  # Empty for no restrictions
  rate_limiting:
    enabled: true
    rate: 100
    period: 60
  ssl:
    enabled: true
    cert_path: "/path/to/cert.pem"
    key_path: "/path/to/key.pem"

# Logging Configuration
logging:
  level: "INFO"
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  handlers:
    file:
      enabled: true
      path: "/var/log/blog_engine.log"
      max_size: 10485760  # 10MB
      backup_count: 5
    syslog:
      enabled: true
      host: "localhost"
      port: 514

# Monitoring Configuration
monitoring:
  prometheus:
    enabled: true
    port: 9090
  alerts:
    email:
      enabled: true
      smtp_server: "smtp.gmail.com"
      smtp_port: 587
      username: "${SMTP_USERNAME}"
      password: "${SMTP_PASSWORD}"
      recipients: ["alerts@yourdomain.com"]
    slack:
      enabled: false
      webhook_url: "${SLACK_WEBHOOK_URL}"
```

## Environment Variables (.env)
```bash
# API Keys
OPENAI_API_KEY=your_openai_key
STORAGE_BUCKET=your_bucket_name
GCP_PROJECT_ID=your_project_id

# Monitoring
SMTP_USERNAME=your_smtp_username
SMTP_PASSWORD=your_smtp_password
SLACK_WEBHOOK_URL=your_webhook_url

# Security
API_KEY=your_api_key
SSL_CERT_PATH=/path/to/cert.pem
SSL_KEY_PATH=/path/to/key.pem
```

## Docker Configuration (docker-compose.yml)
```yaml
version: '3.8'

services:
  blog_engine:
    build: .
    ports:
      - "8000:8000"
      - "9090:9090"
    volumes:
      - ./config:/app/config
      - ./logs:/var/log
    env_file:
      - .env
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  prometheus:
    image: prom/prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    restart: unless-stopped

  grafana:
    image: grafana/grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped

volumes:
  grafana-data:
```

## Prometheus Configuration (prometheus.yml)
```yaml
global:
  scrape_interval: 15s
  evaluation_interval: 15s

scrape_configs:
  - job_name: 'blog_engine'
    static_configs:
      - targets: ['blog_engine:9090']
```

## Deployment Guide

1. Set up infrastructure:
```bash
# Create necessary directories
mkdir -p config logs credentials

# Copy configuration files
cp config.yaml config/
cp prometheus.yml config/

# Set up environment variables
cp .env.example .env
# Edit .env with your values
```

2. Configure SSL (if enabled):
```bash
# Generate self-signed certificate for development
openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
  -keyout credentials/privkey.pem \
  -out credentials/cert.pem
```

3. Start services:
```bash
docker-compose up -d
```

4. Monitor logs:
```bash
docker-compose logs -f blog_engine
```

5. Access services:
- Blog Engine API: http://localhost:8000
- Prometheus: http://localhost:9090
- Grafana: http://localhost:3000

## Health Checks

The blog engine exposes the following health check endpoints:

- `/health` - Basic health check
- `/health/live` - Liveness probe
- `/health/ready` - Readiness probe
- `/metrics` - Prometheus metrics

## Monitoring Dashboard

Access Grafana (http://localhost:3000) and set up dashboards for:

1. System Metrics
   - CPU Usage
   - Memory Usage
   - Queue Size
   - Active Tasks

2. Performance Metrics
   - Generation Time
   - Optimization Time
   - Storage Operations
   - Error Rates

3. Content Metrics
   - Posts Generated
   - SEO Scores
   - Content Quality
   - Generation Success Rate

## Backup and Recovery

Regular backups are configured for:

1. Generated content (daily)
2. Configuration files (on change)
3. Metrics data (hourly)
4. Logs (daily rotation)

Backup schedule and retention can be adjusted in config.yaml